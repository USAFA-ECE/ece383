<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Spectrum Analyzer (0â€“2kHz)</title>
  <style>
    body { margin: 0; background: black; overflow: hidden; }
    canvas { display: block; width: 100%; height: 100%; }
  </style>
</head>
<body>
  <canvas id="canvas"></canvas>
  <script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    let audioContext, analyser, dataArray, source;

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    async function setupAudio() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        analyser = audioContext.createAnalyser();
        source = audioContext.createMediaStreamSource(stream);
        source.connect(analyser);

        analyser.fftSize = 2048; // Higher resolution for better frequency discrimination
        const bufferLength = analyser.frequencyBinCount;
        dataArray = new Uint8Array(bufferLength);

        draw(bufferLength);
      } catch (err) {
        alert('Microphone access denied.');
        console.error(err);
      }
    }

    function draw(bufferLength) {
      requestAnimationFrame(() => draw(bufferLength));
      analyser.getByteFrequencyData(dataArray);

      ctx.fillStyle = 'black';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      const nyquist = audioContext.sampleRate / 2;
      const freqPerBin = nyquist / bufferLength;
      const maxFreq = 2000;
      const maxBin = Math.floor(maxFreq / freqPerBin);

      const barWidth = canvas.width / maxBin;
      let maxVal = 0;
      let maxIndex = 0;

      for (let i = 0; i < maxBin; i++) {
        const val = dataArray[i];
        if (val > maxVal) {
          maxVal = val;
          maxIndex = i;
        }
      }

      for (let i = 0; i < maxBin; i++) {
        const barHeight = dataArray[i] * 2; // Amplify bar height
        ctx.fillStyle = `rgb(${barHeight + 100}, 50, 150)`;
        const x = i * barWidth;
        ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);

        if (i === maxIndex) {
          const peakFreq = Math.round(i * freqPerBin);
          ctx.fillStyle = 'white';
          ctx.font = '16px sans-serif';
          ctx.textAlign = 'center';
          ctx.fillText(`${peakFreq} Hz`, x + barWidth / 2, canvas.height - barHeight - 10);
        }
      }
    }

    setupAudio();
  </script>
</body>
</html>
