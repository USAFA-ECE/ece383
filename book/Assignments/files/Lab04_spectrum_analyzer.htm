<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Spectrum Analyzer (0â€“2kHz)</title>
  <style>
    html, body {
      margin: 0;
      background: black;
      overflow: hidden;
      height: 100%;
    }
    canvas {
      display: block;
      width: 100%;
      height: 100%;
    }
  </style>
</head>
<body>
  <canvas id="canvas"></canvas>
  <script>
    const VERSION = "v1.0";
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');

    function resizeCanvas() {
      canvas.width = canvas.clientWidth;
      canvas.height = canvas.clientHeight;
    }
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    let audioContext, analyser, dataArray, started = false;

    async function setupAudio() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        analyser = audioContext.createAnalyser();
        analyser.fftSize = 2048;
        analyser.smoothingTimeConstant = 0.8;

        const source = audioContext.createMediaStreamSource(stream);
        source.connect(analyser);

        dataArray = new Uint8Array(analyser.frequencyBinCount);
        started = true;
        draw();
      } catch (err) {
        alert('Microphone access denied.');
        console.error(err);
      }
    }

    function draw() {
      requestAnimationFrame(draw);
      if (!started) return;

      analyser.getByteFrequencyData(dataArray);

      ctx.fillStyle = 'black';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      const nyquist = audioContext.sampleRate / 2;
      const freqPerBin = nyquist / dataArray.length;
      const maxFreq = 2000;
      const maxBin = Math.floor(maxFreq / freqPerBin);
      const barWidth = canvas.width / maxBin;

      let peakVal = 0;
      let peakIndex = 0;
      let hasSignal = false;

      for (let i = 0; i < maxBin; i++) {
        const val = dataArray[i];
        if (val > peakVal) {
          peakVal = val;
          peakIndex = i;
        }
        if (val > 10) hasSignal = true;
      }

      for (let i = 0; i < maxBin; i++) {
        const val = dataArray[i];
        const x = i * barWidth;
        const scaledHeight = Math.pow(val / 255, 2) * canvas.height;
        ctx.fillStyle = `rgb(${val + 100}, 50, 180)`;
        ctx.fillRect(x, canvas.height - scaledHeight, barWidth, scaledHeight);
      }

      if (hasSignal && peakVal > 10) {
        const freq = Math.round(peakIndex * freqPerBin);
        const x = peakIndex * barWidth;
        const y = canvas.height - Math.pow(peakVal / 255, 2) * canvas.height - 10;

        ctx.fillStyle = 'white';
        ctx.font = '16px sans-serif';
        ctx.textAlign = 'center';
        ctx.fillText(`${freq} Hz`, x + barWidth / 2, y);
      } else {
        ctx.fillStyle = 'gray';
        ctx.font = '14px sans-serif';
        ctx.textAlign = 'left';
        ctx.fillText(`Waiting for signal...`, 10, 30);
      }

      // Draw version number in top-left
      ctx.fillStyle = 'gray';
      ctx.font = '12px sans-serif';
      ctx.textAlign = 'left';
      ctx.fillText(`Spectrum Analyzer ${VERSION}`, 10, 14);
    }

    setupAudio();
  </script>
</body>
</html>
